1. dotnet new angular, npm install, dotnet add package: MicrosoftEntityFrameworkCore tools + sqlserver, dotnet watch (DotNetCliToolReference in csproj). remember dotnet restore
2. add data classes, add persistence classes: DbContext, register service in Startup and add connection string to configuration
3. dotnet ef migrations add InitialModel, ... add ApplyConstraints, ...Add SeedDatabase, dotnet ef database upgrade (to downgrade: upgrade with migrationName or witho 0 if current migration is first migration)
4. Create Controler with Api. Api with proper attribute, inject context in constructor, api method - async: returning Task<T>, key word await
5. Create resource classes (eg. to avoid looping), map these classes in api, create MappingProfile

take care of api simplicity

6. When creating http POST, remember to create proper ObjectResource class to simplify an api and map between them.

packages: MicrosoftEntityFrameworkCore, Dotnet Watch, dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 3.2.0, ng2-toasty

Register services (incerfaces) in Startup. 3 methods:
- Transient - creates an instance of interface for every request (many instances at the same time)
- Singleton - creates one instance of interface for whole application lifetime (many requests to this )
- Scoped - creates an instance of interface for every request. Disposes current instance after request.

when changind webpack.vendor or sth you need to run webpack --config #namOfTheFile